#!/bin/bash

PAUSE=${PAUSE:-0}
DEBUG=${DEBUG:-0}
PAUSE_DEBUG=${PAUSE_DEBUG:-1}

# For coloured output see https://stackoverflow.com/a/20983251/2334574
# tput setab [1-7] # Set the background colour using ANSI escape
# tput setaf [1-7] # Set the foreground colour using ANSI escape

# Colours are as follows:

# Num  Colour    #define         R G B

# 0    black     COLOR_BLACK     0,0,0
# 1    red       COLOR_RED       1,0,0
# 2    green     COLOR_GREEN     0,1,0
# 3    yellow    COLOR_YELLOW    1,1,0
# 4    blue      COLOR_BLUE      0,0,1
# 5    magenta   COLOR_MAGENTA   1,0,1
# 6    cyan      COLOR_CYAN      0,1,1
# 7    white     COLOR_WHITE     1,1,1

# errxit "the foobar failed" 2
errxit() {
    local message="$1"
    local rc="${2:-1}"

    # shellcheck disable=SC2046
    set $(caller 0)
    line=$1; subroutine=$2; filename=$3

    rerrcho "ERROR at line $line in ${subroutine}() of $filename: $message [$rc]"

    exit "$rc"
}

errcho () {
    if [[ -z $1 ]]; then
        echo >&2
        return 0
    fi

    if [[ $1 == -n ]]; then
        shift
        printf "[%s]: %s" "$(date +'%Y-%m-%d_%H:%M:%S')" "$*" >&2;
    else
        printf "[%s]: %s\n" "$(date +'%Y-%m-%d_%H:%M:%S')" "$*" >&2;
    fi
}

# echo first, to set the colour before errcho adds the timestamp prefix
# yerrcho () { echo -n "${YELLOW}" >&2;  errcho "$1${RESET}"; }
# rerrcho () { echo -n "${RED}" >&2;     errcho "$1${RESET}"; }
# gerrcho () { echo -n "${GREEN}" >&2;   errcho "$1${RESET}"; }
# berrcho () { echo -n "${BLUE}" >&2;    errcho "$1${RESET}"; }
# merrcho () { echo -n "${MAGENTA}" >&2; errcho "$1${RESET}"; }
# cerrcho () { echo -n "${CYAN}" >&2;    errcho "$1${RESET}"; }

RED=1; GREEN=2; YELLOW=3; BLUE=4; MAGENTA=5; CYAN=6; # WHITE=7;

yerrcho () { _colour_errcho $RED,     "$1"; }
rerrcho () { _colour_errcho $GREEN,   "$1"; }
gerrcho () { _colour_errcho $YELLOW,  "$1"; }
berrcho () { _colour_errcho $BLUE,    "$1"; }
merrcho () { _colour_errcho $MAGENTA, "$1"; }
cerrcho () { _colour_errcho $CYAN,    "$1"; }

_colour_errcho () {
    local colour; colour="$1"
    local msg; msg="$2"

    if [[ -n $TERM ]] && [[ $TERM != dumb ]]; then
        local colseq; colseq="$(tput setaf "$colour")"
        local reset; reset="$(tput setaf sgr0)"

        echo -n "$colseq" >&2
        errcho "$msg$reset"
    else
        errcho "$msg"
    fi
}

becho () {
    echo "$(tput setaf "$BLUE")$1$(tput setaf sgr0)"
}

debug () { [[ $DEBUG -eq 1 ]] && yerrcho "${FUNCNAME[1]}: $*"; return 0; }

pause () {
    [[ $PAUSE == 1 ]] && local PAUSE_DEBUG=1

    [[ -n $1 && $PAUSE_DEBUG == 1 ]] && gerrcho "$1"

    [[ $PAUSE == 0 ]] && return 0

    read -n 1 -s -r -p "Press any key to continue"

    errcho
}

pause_fn () {
    pause ": ${FUNCNAME[1]}"
}
