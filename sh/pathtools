#!/bin/bash
import errcho

# https://unix.stackexchange.com/a/40973/154825
PATH.add () {
    local dir; dir="$1"
    [[ -z $dir ]] && { errcho "No dir specified to add to PATH"; return 2; }

    case ":$PATH:" in
        *":$dir:"*) :;; # already there
        *) PATH="$dir:$PATH";;
    esac

    export PATH
}

PATH.persist () {
    local dir pfile; dir="$1"; pfile="${2:-"$HOME"/.profile}"
    [[ -f $pfile ]] || { errcho "ERROR: $pfile not found"; return 1; }
    [[ -z $dir ]]   && { errcho "No dir specified to add to PATH"; return 2; }

    # a rough and ready check
    grep "$dir" "$pfile" > /dev/null && return 0

    errcho "Adding $dir to PATH in $pfile"

    printf "\nPATH="%s:\$PATH"\n" "$dir" >> "$pfile"
}

PATH.add.persist () {
    local dir pfile; dir="$1"; pfile="$2"
    PATH.add "$dir"
    PATH.persist "$dir" "$pfile"
}

# https://unix.stackexchange.com/a/40973/154825
PATH.dedup () {
    if [ -n "$PATH" ]
    then
        old_PATH=$PATH:; PATH=

        while [ -n "$old_PATH" ]
        do
            x=${old_PATH%%:*}       # the first remaining entry

            case $PATH: in
                *:"$x":*) ;;          # already there
                *) PATH=$PATH:$x;;    # not there yet
            esac

            old_PATH=${old_PATH#*:}
        done

        PATH=${PATH#:}
        unset old_PATH x
    fi
}

# latest modified file in dir tree under pwd or $1
#   Also have a look at this for a different approach - https://www.gnu.org/software/findutils/manual/html_node/find_html/Updating-A-Timestamp-File.html
path.last_modified () {
    find -L "${1:-.}" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" "
}

path.last_modified.epoch () {
    date --reference="$(path.last_modified "${1:-.}")" +%s
}

# Usage: path.last_modified.touchfile <touchfilename> <dir>
path.last_modified.touchfile () {
    touch --reference="$(path.last_modified "${2:-.}")" "${1:-touchfile}"
}

path.last_modified.iso8601 () {
    date --reference="$(path.last_modified "$1")" --iso-8601=seconds
}

path.rootdir () {
    local markerfile; markerfile="$1"
    local depth; depth=${2:-0}

    # If the supplied markerfile is the actual path to the file, we simply use its dir
    if [[ -f $markerfile ]]; then
        readlink --canonicalize-existing "$(dirname "$markerfile")"
        return 0
    fi

    # user supplied a relative or absolute path that includes at least one dir
    # component, but the file does not exist there
    if [[ $(dirname "$markerfile") != '.' ]]; then
        errcho "ERROR: markerfile '$markerfile' was expected to exist but it doesn't"
        return 1
    fi

    # search for the markerfile starting from where we are

    local scriptfile
    if [[ $0 == '-bash' ]]; then
        # called directly from commandline
        scriptfile=./DUMMY
    else
        local IFS=' ' # this remains set for the remainder of this function, but I think that's ok
        # shellcheck disable=SC2046,2086
        set $(caller $depth)
        scriptfile=$3
    fi

    local dir; dir="$(dirname "$(readlink --canonicalize "$scriptfile")")"

    _search_upwards_for_rootdir "$dir" "$markerfile"
}

path.rootdir.pwd () {
    local markerfile; markerfile="$1" # e.g. .poet_root
    local dir; dir="$PWD"
    _search_upwards_for_rootdir "$dir" "$markerfile"
}

_search_upwards_for_rootdir () {
    local dir markerfile; dir="$1"; markerfile="$2"

    local startdir; startdir="$dir"

    while [[ $dir != / ]] ; do
        [[ -f $dir/$markerfile ]] && break
        dir=$(dirname "$dir")
    done

    if [[ $dir == / ]]; then
        errcho "No rootdir/$markerfile found above $startdir"
        return 1
    fi

    readlink --canonicalize-existing "$dir"
}

# when searching for rootdir from another stdlib function, need to go back one
# more frame in the callstack for the calling stdlib function, plus one more
# for this function
path.their.rootdir () {
    path._rootdir "$1" 2
}

path.parent.exists () {
    local path; path="$1"
    readlink --canonicalize "$path" > /dev/null
}

# Returns 0 if dir does not exist, or exists and is empty. This is necessary
# because we have 3 situations (dir doesn't exist, dir does exist and is/is not empty)
# but this is a binary result. Not an ideal interface. path.is.empty.dir.exists()
# is better.
path.is.empty.dir () {( # is empty, or does not exist
    set +e
    [[ -n $(find "$1" -maxdepth 0 -type d -empty 2> /dev/null) ]]
)}

path.is.not.empty.dir () {(
    set +e
    ! path.is.empty.dir "$1"
)}

path.is.empty.dir.exists () {
    # [[ -d "$1" ]] || errcho "Does not exist: $1"
    # [[ -d "$1" ]] || errcho "Not a dir: $1"
    [[ -n $(find "$1" -maxdepth 0 -type d -empty) ]]
}

path.is.not.empty.dir.exists () (
    set +e
    ! path.is.empty.dir.exists "$1"
)


# test.dir_exists_xw () (
#     set +e
#     [[ -e $1 ]] && [[ -d $1 ]] && [[ -x $1 ]] && [[ -w $1 ]]
# )

test.dirs_exist_xw () (
    set +e
    for dir in "$@"
    do
        [[ -e $dir ]] && [[ -d $dir ]] && [[ -x $dir ]] && [[ -w $dir ]] && continue
        return $?
    done
)

test.dirs_exist_xr () (
    set +e
    for dir in "$@"
    do
        [[ -e $dir ]] && [[ -d $dir ]] && [[ -x $dir ]] && [[ -r $dir ]] && continue
        return $?
    done
)

# check.dir_exists_xw () {
#     check.dirs_exist_xw "$1"
# }

check.dirs_exist_xw () {
    for dir in "$@"
    do
        test.dirs_exist_xw "$dir" || errxit "Directory [$dir] not xwritable: $?"
    done
}

check.dirs_exist_xr () {
    for dir in "$@"
    do
        test.dirs_exist_xr "$dir" || errxit "Directory [$dir] not xreadable: $?"
    done
}



# # Not just sugar. In cleanup.add, can't pass in things like '&&'
# ## or just say rmdir --ignore-fail-on-non-empty
# path.rmdir.if.empty () {
#     local dir; dir="$1"
#     path.is.empty.dir "$dir" && rmdir --verbose "$dir"
# }


path.backup () {
    local path; path="$1"

    if [[ -f "$path" ]]; then
        local ts; ts=$(date +"%Y-%m-%d_%H-%M-%S")
        mv "$path" "$path.$ts"
    fi
}

# mkdir -p is too loose, mkdir EXISTING_DIR is an error
path.mkdir.if.missing () {
    local dir; dir="$1"
    [[ -d $dir ]] && return 0
    mkdir "$dir"
}

path.is.absolute () {(
    set +e
    [[ $1 =~ ^/ ]]
)}

path.is.relative () {(
    set +e
    ! path.is.absolute "$@"
)}

path.relative () {
    realpath --relative-to="${PWD}" "$1"
}

path.scriptdir () {
    cd "$( dirname "${BASH_SOURCE[1]}" )" > /dev/null 2>&1 && pwd
}


