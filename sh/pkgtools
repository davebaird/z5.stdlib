#!/bin/bash
import errcho

# A note on versions

# In cpanfile2pkglist we drop any package declaration line that has a comma in it, because we're
# handling version declarations separately. If you want to install *both* the deb
# pkg (because it will pick up non-Perl dependencies, along with the older version
# of the Perl lib), *and* the versioned version via cpanm, simply list the package
# twice in the cpanfile source file - once with the version, and once without.
# Of course, that won't work with max versions. ATM, for max versions, check
# the contents of apt.list, if it's not there then fine. If it is, you'll need to
# modify this code.

generate.pkglists () {
    [[ -z ${1:-} ]]      && errxit "Must supply cpanfile sourcefile"
    [[ $1 == cpanfile ]] && errxit "Do not operate directly on cpanfile - use a surrogate e.g. cpanfile.source"
    [[ -f $1 ]]          || errxit "File not found: $1"

    local cpansourcefile; cpansourcefile="$1"

    trap generate.pkglists._cleanup EXIT

    tmpfile=$(mktemp)

    rm -f cpanfile apt.list

    cpanfile2pkglist < "$cpansourcefile" | pkglist2deblist > apt.list 3> cpanfile
    sed '/^#/d' < "$cpansourcefile" | grep , >> cpanfile

    rm "$tmpfile"
    cpanfileshowdeps < cpanfile | pkglist2deblist >> apt.list 3> "$tmpfile"
    cat "$tmpfile" >> cpanfile

    rm "$tmpfile"; sort -u cpanfile > "$tmpfile"; rm cpanfile; cat "$tmpfile" > cpanfile
    rm "$tmpfile"; sort -u apt.list > "$tmpfile"; rm apt.list; cat "$tmpfile" > apt.list
}

generate.pkglists._cleanup () {
    rm -f "$tmpfile"
}

cpanfile2pkglist () {
    declare cpanfilecontents=${1:-$(</dev/stdin)} # https://stackoverflow.com/a/35512655

    echo "$cpanfilecontents" | sed '/^#/d' | sed '/^$/d' | grep -v , | sed 's/requires //' | \
        tr --delete '"' | tr --delete "'" | tr --delete ';' | sed 's/\s.*$//' | sed 's/,.*$//'
}

# shellcheck disable=SC2120
pkglist2deblist () {
    declare pkglist=${1:-$(</dev/stdin)}

    echo "$pkglist" | while read -r perlpkg
    do
        aptpkg="$(echo "$perlpkg" | perl -ne 's/::/-/g; s/$/-perl/; print "lib".lc')"

        # Some packages are provided by others e.g.
        #   apt-cache search libhtml-treebuilder-perl
        #   libhtml-treebuilder-xpath-perl - Perl module to add XPath support to HTML::TreeBuilder

        searchpkg="$(apt-cache search "$aptpkg")"
        #echo ":: $aptpkg"
        if [[ -n $searchpkg ]]
        then
            # shellcheck disable=SC2001
            echo "$searchpkg" | sed 's/\s\-\s.*$//'
        else
            echo "requires '$perlpkg';" >&3
        fi
    done
}

# shellcheck disable=SC2120
cpanfileshowdeps () {
    declare cpanfilecontents=${1:-$(</dev/stdin)}

    # ! I think the "$@" is unnecessary and could cause problems
    echo "$cpanfilecontents" | cpanfile2pkglist "$@" | \
        while read -r pkg
        do
            cpanm --showdeps "$pkg"
        done 2> /dev/null | \
            sed '/^Fetching/d' | sed '/^--/d' | sed '/^Configu/d' | sed '/^perl/d' | \
            sed 's/~.*$//' | sort -u | \
                while read -r maybepkg
                do
                    if cpanm --info "$maybepkg" > /dev/null 2>&1
                    then
                        echo "$maybepkg"
                    else
                        yerrcho "$maybepkg"
                    fi
                done
}
