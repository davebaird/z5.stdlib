#!/bin/bash
import errcho

# https://stackoverflow.com/a/17841619/2334574
join_by () {
    local d=$1; shift;
    local f=$1; shift;
    printf %s "$f" "${@/#/$d}";
}

# https://askubuntu.com/questions/523861/shorten-lines-adding-ellipsis
ellipsize_middle () {
    local len str; len="$1"; str="$2"
    printf '%s' "$str" | \
    awk -v len="$len" '{ if (length($0) > len) print substr($0, 1, len-3) "..." substr($0, length($0) - len, length($0)); else print; }'
}

# https://askubuntu.com/questions/523861/shorten-lines-adding-ellipsis
ellipsize () {
    local len str; len="$1"; str="$2"
    printf '%s' "$str" | \
    awk -v len="$len" '{ if (length($0) > len) print substr($0, 1, len-3) "..."; else print; }'
}

# For global assoc arrays
aa.has () {(
    set +o errexit
    set +o nounset
    local attr aarrayname; attr="$1"; aarrayname="$2"
    local -n aa_has_set_AArray="$aarrayname" || errxit "ERROR: Need bash 4.3 or newer"
    # berrcho "Got value: $value"
    aa.has.set "$attr" "$aarrayname" && [[ -n ${aa_has_set_AArray[$attr]} ]]
)}

# For global assoc arrays
aa.has.set () {(
    set +o errexit
    set +o nounset
    local attr aarrayname; attr="$1"; aarrayname="$2"
    local -n aa_has_set_AArray="$aarrayname" || errxit "ERROR: Need bash 4.3 or newer"
    # eval "value=\${${aarrayname}[$attr]}"
    [[ -n ${aa_has_set_AArray[$attr]+isset} ]]
)}

# For local assoc arrays
# Usage: laa.has.set "$attr" "$(declare -p aarray)"
laa.has.set () {(
    set +o errexit
    set +o nounset
    local attr array_as_str; attr="$1"; array_as_str="$2"

    local -A aa_has_set_aarray
    eval "aa_has_set_aarray=${array_as_str#*=}"

    # local -n aa_has_set_AArray="$aarrayname" || errxit "ERROR: Need bash 4.3 or newer"
    # eval "value=\${${aarrayname}[$attr]}"
    [[ -n ${aa_has_set_aarray[$attr]+isset} ]]
)}

# For local assoc arrays
# Usage: laa.has "$attr" "$(declare -p aarray)"
laa.has () {(
    set +o errexit
    set +o nounset
    local attr array_as_str; attr="$1"; array_as_str="$2"

    local -A aa_has_set_aarray
    eval "aa_has_set_aarray=${array_as_str#*=}"

    laa.has.set "$attr" "$(declare -p aa_has_set_aarray)" && [[ -n ${aa_has_set_aarray[$attr]} ]]
)}

# marginally safe
rmrf_safe () {
    local dir; dir="$1"

    [[ $dir == / ]] && errxit "Attempt to rm -rf /"

    rm -rf "${dir:?}" # if $dir is empty this will throw an error
}

