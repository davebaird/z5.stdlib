#!/usr/bin/bash

import errcho
import stop.pid

dtools.ip () {
    local dname; dname="$1" 
    local ip

    local max; max=50
    local c; c=0

    while true; do
        (( c++ ))
        if ip=$(docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$dname")
        then
            break
        fi

        if [[ $c -gt $cmax ]]; then
            errcho "${FUNCNAME[0]} timed out"
            return 1
        fi

        sleep 0.1
    done

    echo "$ip"
    return 0
}

dtools.stop () {
    local dname; dname="$1"

    if dtools.container.running "$dname"
    then
        docker stop "$dname"
    fi

    if dtools.container.exists  "$dname"  
    then
        docker rm "$dname"
    fi

}

dtools.container.running () {
    docker top "$1" > /dev/null 2>&1 && return 0
    return 1
}

dtools.container.exists () {
    docker container inspect "$1" > /dev/null 2>&1 && return 0
    return 1
}

dtools.waitfor () {
    local dname; dname="$1"
    local pid; pid=$(dtools.tail.log "$dname" /dev/null)
    stop.pid "$pid"
}

# How to launch a process in background and wait for it to start before moving on
# https://stackoverflow.com/a/33564955/2334574
dtools.tail.log () {
    local dname="$1"
    local logfile="$2"
    local pid
    local count

    while true; do
        docker logs -f "$dname" > "$logfile" 2>&1 &
        pid=$!

        count=$(ps -A | grep -c $pid)   # check whether process is still running

        # if process is already terminated, then there can be two cases:
        #   the process executed and stopped successfully, or it terminated abnormally
        if [[ $count -eq 0 ]]; then
            if wait $pid    # checks if process executed successfully or not
            then                                        
                errxit "docker logs $dname ran and exited - that's unexpected" 1
            else            # process terminated abnormally                                          
                debug "docker $dname not ready - can't start logging yet (returned $?)"
                sleep 0.1
            fi
        else                # process is still running
            errcho "docker logs $dname is running" 
            break
        fi
    done

    echo "$pid"
    return 0
}

