#!/usr/bin/perl
use strict;
use warnings;
use open ":std", ":encoding(UTF-8)";
use feature qw(signatures say);
no warnings qw(experimental::signatures);
use sigtrap qw/handler signal_handler normal-signals/;
sub signal_handler { die $? } # exiting via 'die' ensures the END block is called

# This script is used by webtools.dump_dom

# Requires Chrome/chromium to be installed

# use Carp;
# use Data::Dumper;

# https://cordis.europa.eu/article/id/123228-the-oldest-directly-dated-modern-human-fossil-found-outside-of-africa-and-the-levant-

use Log::Log4perl qw(:easy);
use WWW::Mechanize::Chrome;

# To install WWW::Mechanize::Chrome, first sudo apt-get install libpng-dev
# For Chromium: sudo apt-get install chromium-browser

# https://chromedevtools.github.io/devtools-protocol/

$| = 1;

my $url = $ARGV[0] || die "Need a URL";

Log::Log4perl->easy_init($ERROR);

# $ENV{WWW_MECHANIZE_CHROME_CONNECTION_STYLE} = 'pipe';

my $mech = get_mech();

my %listeners = setup_listeners($mech);

$mech->get($url);

get_title();

# In the normal case, one of the listeners will trigger dump_dom() and exit, but if not,
# we do it here
for (1..100) {
    $mech->sleep(0.1);
    # get_title();
}

dump_dom($mech);

exit(0);

END {
    warn "mech close";
    $mech->close;
    warn "rv: $?";
    exit 0;
}

# ==============================================================================
sub get_mech {
    my $ua = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36';

    WWW::Mechanize::Chrome->new(
        headless => 1,
        # launch_exe => '/usr/local/src/z5.stdlib/bin/launch-zenika-alpine-chrome', # can't get this to work
        launch_arg => [ #"--disable-software-rasterizer",   # for zenika container
                        #"--disable-dev-shm-usage",         # for zenika container
                        "--no-sandbox",
                        '--ignore-certificate-errors',
                        '--disable-web-security',
                        '--allow-running-insecure-content',
                        "--user-agent='$ua'"
                        ],
        separate_session => 1,
        popup_blocking => 1,
        # host => '0.0.0.0',
        # port => 9222,
        # listen_host => '0.0.0.0',
    );
}

sub setup_listeners ($mech) {
    $mech->target->send_packet('Page.setLifecycleEventsEnabled', enabled => JSON::true);

    my %l;

    $l{'DOM.documentUpdated'} = $mech->add_listener('DOM.documentUpdated', sub {
        warn "DOM.documentUpdated\n";
    });

    $l{'Page.loadEventFired'} = $mech->add_listener('Page.loadEventFired', sub { #
        warn "Page.loadEventFired\n";
    });

    $l{'Page.lifecycleEvent'} = $mech->add_listener('Page.lifecycleEvent', sub {
        my $eventname = $_[0]->{params}->{name};

        warn "Page.lifecycleEvent: $eventname\n";

        if ($eventname eq 'firstMeaningfulPaint') {
            $mech->sleep(2);
            dump_dom($mech);
            exit(0);
        }
    });

    return %l;
}

sub get_title {
    my ($title, $type) = $mech->eval( 'document.title' );
    warn "Title: $title\n";
}

sub dump_dom ($mech) {
    my ($html, $type) = $mech->eval('document.documentElement.outerHTML');
    die "dump_dom expected string, got '$type' ($html)" unless $type eq 'string';
    say $html;
}

__END__
# $mech->add_listener('DOMContentLoaded', sub {
#     my ( $info ) = @_;
#     warn "Listener returned: " . Dumper($info);
# });


# warn "Setting up future events: Page.loadEventFired";
# my $future_events = $mech->_collectEvents(
#     sub { $_[0]->{method} eq 'Page.loadEventFired' }
# );

# Candidates:
# Page.loadEventFired
# DOM.documentUpdated
# Page.lifecycleEvent - returns name of event



# warn "Adding listeners";
# my $documentUpdated = Future->new;
# my $loadEventFired = Future->new;

# my $lc_listener = $mech->add_listener('Page.lifecycleEvent', sub {
#     warn "lifecycleEvent said: " . join(' | ', @_);
# });

warn "Sending Page.setLifecycleEventsEnabled";
$mech->target->send_packet('Page.setLifecycleEventsEnabled', enabled => JSON::true); #

# # my $dom_documentupdated_seen = 0;
warn "Listener: DOM.documentUpdated";
my $listener = $mech->add_listener('DOM.documentUpdated', sub { # Page.loadEventFired
    warn "DOM.documentUpdated: \n"; # . Dumper($_[0]);
    # return unless $dom_documentupdated_seen++; # it fires twice, why?
    # warn "XXXXXXXXXXX DOM.documentUpdated XXXXXXXXXXX";
    # # sleep 3;
    # # my ($value, $type) = $mech->eval('document.documentElement.outerHTML');
    # # print $type . ' : ' . $value;
    # $documentUpdated->is_ready || $documentUpdated->done;
});

warn "Listener: DOM.loadEventFired";
my $listener2 = $mech->add_listener('Page.loadEventFired', sub { #
    warn "Page.loadEventFired: \n"; # . Dumper($_[0]);
    # sleep 3;
    # my ($value, $type) = $mech->eval('document.documentElement.outerHTML');
    # print $type . ' : ' . $value;
    # $loadEventFired->done;
});

# warn "one-shot: Page.setLifecycleEventsEnabled";
# my $f = $mech->target->one_shot('Page.setLifecycleEventsEnabled')->get;
# $f->done;

# my $fut = $mech->target->send_message('Page.setLifecycleEventsEnabled');
# warn "Page.setLifecycleEventsEnabled: " . $fut->get; # boolean

# ! firstmeaningfulpaint seems not to always fire. Maybe most reliable candidate
# ! is firstmeaningfulpaintcandidate plus a few seconds.
# networkalmostidle and networkidle are also indicative

warn "Listener: DOM.lifecycleEvent";
my $listener3 = $mech->add_listener('Page.lifecycleEvent', sub {
    # warn "Page.lifecycleEvent fired: " . Dumper($_[0]);
    warn "Page.lifecycleEvent: " . $_[0]->{params}->{name} . "\n";
});

# # isa Chrome::DevToolsProtocol::EventListener - has protocol, callback, event
# # warn "Got a listener: " . Dumper($listener);


warn "Fetching page";
$mech->get('https://cordis.europa.eu/article/id/123228-the-oldest-directly-dated-modern-human-fossil-found-outside-of-africa-and-the-levant-');
get_title();
# warn "sleep 10";
# $mech->sleep(10);

# my ($value, $type) = $mech->eval('document.documentElement.outerHTML');
# print $type . ' : ' . $value;

# warn "Gathering futures";
# my $loaded = Future->wait_all($loadEventFired, $documentUpdated);

# warn "Awaiting loaded";
# until ($loaded->is_ready) {
#     warn "loaded is not ready";
#     sleep 1;
# }

warn "Sleep an extra 5";
for (1..10) {
    warn "Sleep 1...\n";
    $mech->sleep(1);
    get_title();
}

sub get_title {
    my ($title, $type) = $mech->eval( 'document.title' );
    # my ($html, $type) = $mech->eval('document.documentElement.outerHTML');
    print "Title: $title\n";
}

$mech->close;

# warn "Done waiting - bye";

# # warn "Awaiting events";
# # $future_events->await;

# warn "Done waiting";
# my ($value, $type) = $mech->eval('document.documentElement.outerHTML');
# print $type . ' : ' . $value;

# # my ($e, $r) = Future->wait_all( $events, $self->target->send_message(...));
# my ($e, $r) = Future->wait_all( $events, $mech->eval('document.documentElement.outerHTML') );

# Dumper($e);
# print "============================================================\n";
# print "============================================================\n";
# Dumper($r);

# my ($value, $type) = $mech->eval('document.documentElement.outerHTML');
# print $type . ' : ' . $value;

# print Dumper($mech->document);

# print $mech->content( format => 'html' );

# my $js = 'document.addEventListener("DOMContentLoaded", function(event) {
#   //do work
#   return document.documentElement.outerHTML;
# });';

# my $js = <<JS;
#     if (document.readyState === "complete" || document.readyState === "interactive") {
#         document.documentElement.outerHTML;
#     }
# JS

# # $mech->sleep(5);
# my ($value, $type);
# while (1) {
#     ($value, $type) = $mech->eval( $js );
#     last unless $type eq 'undefined';
#     warn "Sleep 1";
#     sleep 1;
# }
# # my ($value, $type) = $mech->eval('javascript:void(window.open("javascript:document.open(\"text/plain\");document.write(opener.document.body.parentNode.outerHTML)"))');
# # my ($value, $type) = $mech->eval('document.body.parentNode.outerHTML');
# print $type . ' : ' . $value;

# my @got = $mech->selector('html');
# print Dumper(\@got);



