#!/usr/bin/bash

if [[ -n ${1:-} && $1 == strict ]]; then
    # saner programming env: these switches turn some bugs into errors
    set -o errexit
    set -o nounset
    set -o pipefail
    #set -o noclobber
fi

# https://unix.stackexchange.com/questions/4650/determining-path-to-sourced-shell-script

# don't put this inside functions, it'll get it wrong (see link)
_importer_source_dir="$( dirname "$(readlink -f "${BASH_SOURCE[0]}")" )"

_stdlib_self_update () {(
    local stdlibdir; stdlibdir="$(dirname "$_importer_source_dir")"
    cd "$stdlibdir"
    # git is installed; the current user owns this file; stdlibdir is in a git repo
    if which git > /dev/null && [[ -O ${BASH_SOURCE[0]} ]] && git rev-parse 2> /dev/null ; then
        git pull > /dev/null
    fi
)}

_stdlib_self_update

# import somelib
import () {
    local lib; lib="$1"
    local libdir; libdir="$_importer_source_dir"

    declare -A imported

    if [[ -f "$libdir/$lib" ]]; then
        [[ -n ${imported[$lib]+x} ]] && [[ ${imported[$lib]} -eq 1 ]] && return 0

        # shellcheck disable=SC1090
        source "$libdir/$lib"
        imported[$lib]=1
        return 0
    else
        echo "ERROR: Library '$lib' not found in $libdir" >&2
        return 1
    fi
}

# refactor this when I get the chance. Not using it for anything yet.
import.utils () {
    local lib; lib="$1"
    local libdir; libdir="$(dirname "$_importer_source_dir")/z5.utils"

    declare -A imported_utils

    if [[ -f "$libdir/$lib" ]]; then
        [[ -n ${imported_utils[$lib]+x} ]] && [[ ${imported_utils[$lib]} -eq 1 ]] && return 0

        # shellcheck disable=SC1090
        source "$libdir/$lib"
        imported_utils[$lib]=1
        return 0
    else
        echo "ERROR: Library '$lib' not found in $libdir" >&2
        return 1
    fi
}
