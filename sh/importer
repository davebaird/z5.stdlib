#!/bin/bash

if [[ -n ${1:-} && $1 == strict ]]; then
    # saner programming env: these switches turn some bugs into errors
    set -o errexit
    set -o nounset
    set -o pipefail
    set -o noclobber
fi

# set DEBUG_STDLIB unless it was already exported by caller
test_debug=${DEBUG_STDLIB:-}
if [[ -z $test_debug ]]; then
    export DEBUG_STDLIB=
fi

# https://unix.stackexchange.com/questions/4650/determining-path-to-sourced-shell-script

# don't put this inside functions, it'll get it wrong (see link)
_z5stdlibshdir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
_z5stdlibdir="$(dirname "$_z5stdlibshdir")"

# TODO: use a cache e.g. in ~/.z5.stdlibrc.d to only do this 1x per hour
_stdlib_self_update () {(
    cd "$_z5stdlibdir"
    # git is installed; the current user owns this file; stdlibdir is in a git repo
    if which git > /dev/null && [[ -O ${BASH_SOURCE[0]} ]] && git rev-parse 2> /dev/null ; then
        git pull > /dev/null
    fi
)}

_stdlib_self_update

declare -A imported

# import somelib
import () {
    local lib; lib="$1"
    shift

    # declare -A imported

    if [[ -f "$_z5stdlibshdir/$lib" ]]; then
        [[ -n ${imported[$lib]+x} ]] && [[ ${imported[$lib]} -eq 1 ]] && return 0

        # shellcheck disable=SC1090
        source "$_z5stdlibshdir/$lib" "$@"
        imported[$lib]=1
        [[ $DEBUG_STDLIB -eq 1 ]] && echo "STDLIB imported: $lib" >&2
        return 0
    else
        echo "ERROR: Library '$lib' not found in $_z5stdlibshdir" >&2
        return 1
    fi
}

[[ $DEBUG_STDLIB -eq 1 ]] && { import errcho; import stacktrace; }

debug_stdlib () { [[ $DEBUG_STDLIB -eq 1 ]] && yerrcho "STDLIB::${BASH_SOURCE[1]}::${FUNCNAME[1]}: $*"; return 0; }
