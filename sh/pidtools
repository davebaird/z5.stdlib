#!/bin/bash
import errcho

# Pass '--quiet' as first arg to silence the warning about no /proc/$pid
stop.pid () {
    local opt_quiet=0

    if [[ $# -eq 2 ]]; then
        if [[ $1 == "--quiet" ]]; then
            opt_quiet=1
        else
            errcho "Unknown option: $1"
            return 1
        fi
        shift
    fi

    local pid="$1"

    if [[ -z $pid ]]; then
        errcho "WARNING: ${FUNCNAME[0]} expects a PID"
        return 0
    fi

    if ! [[ -d /proc/$pid ]]; then
        [[ $opt_quiet -ne 1 ]] && errcho "WARNING: no /proc/$pid to stop"
        return 0
    fi

    local cmd; cmd=$(ps --no-headers -o cmd --pid "$pid" | perl -pe 's/ +/ /g')
    errcho "Stopping PID $pid - command was: $cmd"

    # shellcheck disable=SC2046,SC2086
    kill -term $pid $(list.descendants $pid) || :

    # give it up to 5 seconds to gracefully shut down
    local i=0
    while [[ -d /proc/$pid ]]; do
        sleep 0.1
        ((i=i+1))

        [[ $i -eq 50 ]] && break
    done

    # make sure of the job
    if [[ -d /proc/$pid ]]; then
        # shellcheck disable=SC2046,SC2086
        kill -9 $pid $(list.descendants $pid) || :
    fi
}


list.descendants () {
    local children; children=$(ps -o pid= --ppid "$1")

    for pid in $children; do
        list.descendants "$pid"
    done

    echo "$children"
}

list.descendants.comma_separated () {
    list.descendants "$1" | tr '\n' ',' | sed 's/,\+/,/g' | sed 's/\s\+//g' | sed 's/,$//'
}
