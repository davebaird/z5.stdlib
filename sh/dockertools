#!/bin/bash

import errcho
import pidtools
import checks


# dtools.ip () {
#     local dname; dname="$1"
#     local ip

#     local cmax; cmax=50
#     local c; c=0

#     while true; do
#         (( c++ ))
#         ! ip=$(docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$dname") && break

#         if [[ $c -gt $cmax ]]; then
#             rerrcho "${FUNCNAME[0]} timed out waiting for $dname (caller: ${FUNCNAME[1]})"
#             return 1
#         fi

#         sleep 0.1
#     done

#     echo "$ip"
#     return 0
# }

dtools.ip () {
    local dname; dname="$1"
    dtools.waitfor "$dname"
    local ip; ip=$(docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$dname")
    echo "$ip"
    return 0
}

dtools.stop () {
    local dname; dname="$1"

    if dtools.container.running "$dname"
    then
        docker stop "$dname"
    fi

    if dtools.container.exists  "$dname"
    then
        docker rm --force "$dname"
    fi

}

dtools.container.running () {
    docker top "$1" > /dev/null 2>&1 && return 0
    return 1
}

dtools.container.exists () {
    docker container inspect "$1" > /dev/null 2>&1 && return 0
    return 1
}

# Wait for the container to be up, running, and functional, by checking it can
# generate log output. Then cleanup the log process.
dtools.waitfor () {
    local dname; dname="$1"
    local pid; pid=$(dtools.tail.log "$dname" /dev/null)
    stop.pid "$pid"
}

# How to launch a process in background and wait for it to start before moving on
# https://stackoverflow.com/a/33564955/2334574
dtools.tail.log () {
    local dname="$1"
    local logfile="$2"
    local pid
    local count

    while true; do
        docker logs -f "$dname" > "$logfile" 2>&1 &
        pid=$!

        count=$(ps -A | grep --count $pid)   # check whether process is still running

        # if process is already terminated, then there can be two cases:
        #   the process executed and stopped successfully, or it terminated abnormally
        if [[ $count -eq 0 ]]; then
            if wait $pid    # checks if process executed successfully or not
            then
                errcho "docker logs $dname ran and exited - that's unexpected"
                return 1
            else            # process terminated abnormally
                debug "docker $dname not ready - can't start logging yet (returned $?)"
                sleep 0.1
            fi
        else                # process is still running
            errcho "docker logs $dname is running"
            break
        fi
    done

    echo "$pid"
    return 0
}

# https://docs.docker.com/engine/install/debian/
# https://docs.docker.com/engine/install/ubuntu/
dtools.docker.install () {
    local os; os=$(check.os)

    apt-get remove docker docker-engine docker.io containerd runc

    curl -fsSL "https://download.docker.com/linux/$os/gpg" | apt-key add -

    add-apt-repository \
        "deb [arch=amd64] "https://download.docker.com/linux/$os" \
        $(lsb_release -cs) stable"

    apt-get update

    apt-get -y --no-install-recommends install \
        apt-transport-https ca-certificates curl gnupg-agent gnupg2 software-properties-common \
        docker-ce docker-ce-cli containerd.io

    if ! getent group docker > /dev/null; then
        groupadd docker
    fi

    systemctl enable docker > /dev/null 2>&1
}

