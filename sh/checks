#!/bin/bash
import errcho

# checks errexit
# tests return 0/1 return code
# gets echo a piece of information

check.i_am_root () {
    check.i_can_root
    check.homedir root
    check.i_can_sbin
}

check.i_can_sbin () {
    which groupadd > /dev/null || errxit "root environment not properly initialised - sbin not in PATH"
}

# shellcheck disable=SC2120
check.i_can_root () {
    local msg; msg=${1:-$0 must be run as root}
    test.i_can_root || errxit "$msg"
}

test.i_can_root () (
    set +e
    [[ $EUID -eq 0 ]]
)

test.i_can_sudo_root () (
    set +e
    sudo echo ok > /dev/null
)

# server info
# cat /etc/os-release
# cat /etc/lsb-release
# uname -a
test.is_debian () (
    set +e
    [[ $(get.os) = debian ]]
)

test.is_ubuntu () (
    set +e
    [[ $(get.os) = ubuntu ]]
)

test.is_i386 () {
    # same thing
    test.is_x86
}

test.is_x86 () (
    set +e
    [[ $(uname -m) = XXX ]] # TODO
)

test.is_x86_64 () (
    set +e
    [[ $(uname -m) = x86_64 ]]
)

test.is_amd64 () {
    # same thing
    test.is_x86_64
}

get.os () {
    source /etc/os-release
    echo "$ID"
}

# How sudo and su set up things is subtle and can vary from one host to another.
# This function is for when we need to be sure changes will be made in the intended
# user's homedir.
check.homedir () {
    # Could just use $USER here but if we're paranoid about $HOME, might as well
    # be paranoid about $USER. Try and remember not to simply use $USER when
    # calling this function, although the homedir checks are still valid and
    # probably we can trust $USER?
    local user; user="${1}"

    [[ $user != "$USER" ]] && errxit "${FUNCNAME[0]} only makes sense while running as same user [got USER: '$USER' and user: '$user']"

    homedir="$(eval echo "~$user")"

    if [[ "$HOME" != "$homedir" ]]; then
        errxit "\$HOME [$HOME] does not agree with \$(eval echo \"~\$user\") [$homedir] for user $user"
    fi

    if [[ $user == root ]]; then
        [[ $HOME == /root ]]       || errxit "Wrong home for root: $HOME"
    else
        [[ $HOME == /home/$user ]] || errxit "Wrong home for $user: $HOME"
    fi
}


:
