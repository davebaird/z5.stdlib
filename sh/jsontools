#!/bin/bash
import installer

# install.jo

# Pass assoc array into function: https://stackoverflow.com/a/8881121/2334574
# Convert to json:                https://stackoverflow.com/a/44792751/2334574
# Use it thusly:                  aa2j "$(declare -p AArray)"
aa2j () { # associative array 2 json
    local arrstr; arrstr="$1"

    declare -A arr
    eval "arr=${arrstr#*=}"

    # shellcheck disable=SC2154
    for key in "${!arr[@]}"
    do
        printf '%s\0%s\0' "$key" "${arr[$key]}"
    done |
        jq -Rs '
        split("\u0000")
        | . as $a
        | reduce range(0; length/2) as $i
            ({}; . + {($a[2*$i]): ($a[2*$i + 1]|fromjson? // .)})'
}

# Usage: a2j "$(declare -p arrayname)"
a2j () { # array 2 json
    local arrstr; arrstr="$1"

    # if no entries have been added to the bash array, the 'declare -p' output
    # will have no '='. If we don't handle that case here, we get '[ null ]'
    if ! [[ $arrstr = *=* ]]
    then
        echo "[]"
        return 0
    fi

    local -a arr; eval "arr=${arrstr#*=}"

    # print each value on its own line
    printf "%s\n" "${arr[@]}" | jo -a
}

# Usage: j2a myarray "$json"
j2a () {
    readarray -t "$1" < <(printf '%s' "$2" | jq --raw-output --compact-output '.[]')
}

jsonval () {
    local tmp
    tmp="$(jo -a "$1")"        # get single-valued array, with value appropriately quoted (or not) and escaped
    printf '%s' "${tmp:1:-1}"  # remove array brackets from either end
}

is.json () {
    jq --exit-status . > /dev/null 2>&1 <<< "$1"
}

json.denullify2str () {
    local json; json="$1"
    [[ $json == null ]] && json=
    printf '%s' "$json"
}

json.denullify2arr () {
    local json; json="$1"
    [[ $json == null ]] && json='[]'
    printf '%s' "$json"
}
