#!/bin/bash
import errcho
import pidtools
import checks
import installer
import pathtools

dtools.ip () {
    local dname; dname="$1"
    dtools.waitfor "$dname"
    # local ip; ip=$(docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$dname")
    # printf '%s\n' "$ip"
    docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$dname"
}

dtools.stop () {
    local -i verbose; verbose=0
    if [[ $1 == --verbose ]]; then
        verbose=1
        shift
    fi

    local dname; dname="$1"

    if dtools.container.running "$dname"
    then
        ((verbose == 1)) && errcho "Stopping $dname"
        docker stop "$dname"
    else
        ((verbose == 1)) && errcho "Not stopping: $dname is not running"
    fi

    if dtools.container.exists  "$dname"
    then
        ((verbose == 1)) && errcho "Removing stopped container $dname"
        docker rm --force "$dname"
    fi
}

dtools.container.running () (
    set +e
    docker top "$1" > /dev/null 2>&1
)

dtools.container.exists () (
    set +e
    docker container inspect "$1" > /dev/null 2>&1
)

dtools.image.exists () (
    set +e
    docker image inspect "$1" > /dev/null 2>&1
)

dtools.volume.ls () {
    if [[ $1 = */* ]]
    then
        docker run --rm -i --volume "${1%/*}":/tmp/myvolume busybox ls -al /tmp/myvolume/"${1#*/}"
    else
        docker run --rm -i --volume "${1}":/tmp/myvolume busybox ls -al /tmp/myvolume
    fi
}

dtools.volume.find () {
    docker run --rm -i --volume "$1":/tmp/myvolume busybox find /tmp/myvolume
}

# Wait for the container to be up, running, and functional, by checking it can
# generate log output. Then cleanup the log process.
dtools.waitfor () {
    local dname; dname="$1"
    local pid; pid="$(dtools.tail.log "$dname" /dev/null)"
    stop.pid "$pid"
}

# How to launch a process in background and wait for it to start before moving on
# https://stackoverflow.com/a/33564955/2334574
dtools.tail.log () {
    local dname="$1"
    local logfile="$2"
    local pid
    local count

    path.parent.exists "$logfile" || errxit "ERROR: $logfile parent folder does not exist"

    while true
    do
        docker logs -f "$dname" >> "$logfile" 2>&1 &
        pid=$!

        # Sometimes, when called by dtools.waitfor, this next command kicks up an error but
        # the script continues running. Until I can figure it out, it seems to happen
        # intermittently I'm guessing when the container we just started is not ready.
        # For something. I mean, that's what dtools.waitfor is checking, and it uses this function as a
        # hack to do its testing, but I guess since it is a hack, these things are to be expected.
        # Anyway, this note just to reassure a future me when I forget all about it and
        # am trying to debug these unexpected, intermittent messages.

        # shellcheck disable=2009
        count=$(ps -A | grep --count $pid)   # check whether process is still running

        # if process is already terminated, then there can be two cases:
        #   the process executed and stopped successfully, or it terminated abnormally
        if ((count == 0))
        then
            if wait $pid    # checks if process executed successfully or not
            then
                errcho "ERROR: docker logs $dname ran and exited"
                return 1
            else            # process terminated abnormally
                debug "docker $dname not ready - can't start logging yet (returned $?)"
                sleep 0.1
            fi
        else                # process is still running
            # errcho "docker logs $dname is running"
            break
        fi
    done

    echo "$pid"
}

# https://docs.docker.com/engine/install/debian/
# https://docs.docker.com/engine/install/ubuntu/
dtools.docker.install.cli () {
    local os; os=$(get.os)

    apt-get remove docker docker-engine docker.io containerd runc > /dev/null 2>&1 || :

    install.apt.pkgs software-properties-common curl gnupg2

    curl -fsSL "https://download.docker.com/linux/$os/gpg" | apt-key add -

    apt-add-repository --yes \
        "deb [arch=amd64] https://download.docker.com/linux/$os $(lsb_release -cs) stable"

    install.apt.pkgs apt-transport-https ca-certificates curl gnupg-agent \
                        software-properties-common docker-ce docker-ce-cli
}

dtools.docker.install () {
    dtools.docker.install.cli

    install.apt.pkgs containerd.io

    groupadd docker > /dev/null 2>&1 || :

    systemctl enable docker > /dev/null 2>&1
}

# 2021-01-05T22:13:39.12345+00:00
dtools.LastTagTime.iso8601 () {
    # 2021-01-05 22:12:29.766192404 +0100 CET
    local lttime; lttime="$(docker image inspect --format '{{.Metadata.LastTagTime}}' "$1")"

    lttime="$(printf '%s' "$lttime" | sed 's/\s/T/')"
    lttime="$(printf '%s' "$lttime" | sed 's/\s//')"
    lttime="$(printf '%s' "$lttime" | sed 's/\s[[:upper:]]\+//')"

    printf '%s\n' "$lttime"
}
