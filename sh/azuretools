#!/bin/bash
import errcho
import checks

# https://docs.microsoft.com/en-us/azure/cognitive-services/translator/reference/v3-0-translate
# export AZURE_KEY="$key"
# FROM_LC=en TO_LC=es azure.tr "$text"
azure.tr () {
    if [[ -z $AZURE_KEY ]] || [[ -z $FROM_LC ]] || [[ -z $TO_LC ]]; then
        errcho "ERROR: must provide AZURE_KEY, FROM_LC and TO_LC"
        return 1
    fi

    local text
    # For -0777 flag ($/ = undef) - https://stackoverflow.com/a/30594643/2334574
    # Even better - https://www.perl.com/pub/2004/08/09/commandline.html/
    # text=$(printf '%s' "$text" | perl -0777 -e '$_=<>; s/\n+/ /g; s/\s+/ /g; s/(?:^\s|\s$)//mg; print')
    # text=$(<<< "$1" perl -0777 -e '$_=<>; s/\n+/ /g; s/\s+/ /g; s/(?:^\s|\s$)//mg; print')
    text=$(<<< "$1" perl -0777 -pe 's/\n+/ /g; s/\s+/ /g; s/(?:^\s|\s$)//mg')

    local url
    url="https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&from=${FROM_LC}&to=${TO_LC}"

    local data; data="$(jo -a "$(jo "Text=$text")")"
    local response;
    response="$(curl --request POST "$url" \
                     --header "Ocp-Apim-Subscription-Key: $AZURE_KEY" \
                     --header "Content-Type: application/json; charset=UTF-8" \
                     --data "$data" 2> /dev/null)"

    # gerrcho "$response"
    echo "$response" | jq --raw-output '.[0].translations[0].text' 2> /dev/null && return 0

    local e="$?" # 5
    rerrcho "$response" # {"error":{"code":400000,"message":"One of the request inputs is not valid."}}
    return "$e"
}

    # die "Unknown target language " . $self->to_lc unless $self->known_language($self->to_lc);

    # method accepted_languages {
    #         return ( [en => 'English'],
    #                 [es => 'Español'],
    #                 [fr => 'Français'],
    #                 [ru => 'русский'],
    #                 [de => 'Deutsch'],
    #                 [da => 'Dansk'],
    #                 [nl => 'Nederlands'],
    #                 [it => 'Italiano'],
    #                 [ca => 'Català'],
    #     #             [eu => 'Euskara'], # Microsoft don't do this
    #                 [pt => 'Português'],
    #                 );
    #     }

    # method known_language ($lc) {
    #     my %lang = map { @$_ } $self->accepted_languages;
    #     return $lang{$lc};
    # }


azuretools.is_azure () {
    [[ $(dmidecode -s system-manufacturer) == "Microsoft Corporation" ]]
}

# configure swap (Azure)
# https://support.microsoft.com/en-us/help/4010058/how-to-add-a-swap-file-in-linux-azure-virtual-machines
azuretools.set_up_swap () {
    test.i_can_root || { errcho "Must be root to set up swap"; return 1; }
    sed -i 's|ResourceDisk.Format=n|ResourceDisk.Format=y|' /etc/waagent.conf
    sed -i 's|ResourceDisk.EnableSwap=n|ResourceDisk.EnableSwap=y|' /etc/waagent.conf
    sed -i 's|ResourceDisk.SwapSizeMB=0|ResourceDisk.SwapSizeMB=2048|' /etc/waagent.conf
    service walinuxagent restart
}

