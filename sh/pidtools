#!/bin/bash
import errcho

# Pass '--quiet' as first arg to silence the warning about no /proc/$pid
stop.pid () {
    local opt_quiet=0

    if (($# == 2))
    then
        [[ $1 == "--quiet" ]] || { errcho "Unknown option: $1"; return 1; }
        opt_quiet=1
        shift
    fi

    local pid; pid="$1"
    [[ -z $pid ]] && { errcho "WARNING: ${FUNCNAME[0]} expects a PID"; return 0; }

    if ! [[ -d /proc/$pid ]]
    then
        ((opt_quiet != 1)) && errcho "WARNING: no /proc/$pid to stop"
        return 0
    fi

    errcho "Stopping PID $pid - command was: $(pid.command "$pid")"

    # shellcheck disable=SC2046,SC2086
    kill -term $pid $(list.descendants $pid) || :

    # give it up to 5 seconds to gracefully shut down
    local i=0
    while [[ -d /proc/$pid ]]
    do
        sleep 0.1
        ((i=i+1))

        ((i == 50)) && break
    done

    # make sure of the job
    if [[ -d /proc/$pid ]]
    then
        # shellcheck disable=SC2046,SC2086
        kill -9 $pid $(list.descendants $pid) || :
    fi
}

pid.command () {
    ps --no-headers -o cmd --pid "$1" | perl -pe 's/ +/ /g'
}

list.descendants () {
    local children; children=$(ps -o pid= --ppid "$1")

    for pid in $children
    do
        list.descendants "$pid"
    done

    printf '%s\n' "$children"
}

list.descendants.comma_separated () {
    list.descendants "$1" | tr '\n' ',' | sed 's/,\+/,/g' | sed 's/\s\+//g' | sed 's/,$//'
}

pidfile.set () {
    local dir path pid; path="$1"; pid="$2"
    dir="$(dirname "$path")"
    mkdir -p "$dir"
    rm -f "$path"
    echo "$pid" > "$path"
}

pidfile.get () {
    cat < "$1"
}

# https://stackoverflow.com/a/32327705/2334574
mem.swapusage () (
    nostrict

    grep VmSwap /proc/[0-9]*/status | awk -F':' -v sort="$1" '
    {
        split($1,pid,"/") # Split first field on /
        split($3,swp," ") # Split third field on space
        cmdlinefile = "/proc/"pid[3]"/cmdline" # Build the cmdline filepath
        getline pname[pid[3]] < cmdlinefile # Get the command line from pid
        swap[pid[3]] = sprintf("%6i %s",swp[1],swp[2]) # Store the swap used (with unit to avoid rebuilding at print)
        sum+=swp[1] # Sum the swap
    }
    END {
        OFS="\t" # Change the output separator to tabulation
        print "Pid","Swap used","Command line" # Print header
        if(sort) {
        getline max_pid < "/proc/sys/kernel/pid_max"
        for(p=1;p<=max_pid;p++) {
            if(p in pname) print p,swap[p],pname[p] # print the values
        }
        } else {
        for(p in pname) { # Loop over all pids found
            print p,swap[p],pname[p] # print the values
        }
        }
        print "Total swap used:",sum # print the sum
    }'
)