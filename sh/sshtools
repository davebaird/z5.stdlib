#!/bin/bash
import errcho
import usertools
import pathtools
import installer

# If want to give keyfile arg, must also give comment.
sshtools.generate_keypair () {
    local comment; comment=${1:-"$USER@$(hostname)"}
    local keyfile; keyfile=${2:-"$HOME/.ssh/id_rsa"}

    if [[ -f $keyfile ]]
    then
        rerrcho "ERROR: keyfile $keyfile already exists - skipping"
        return 1
    fi

    # -t: type; -b: bits; -C: comment; -q: quiet; -N: new passphrase; -f: output filename
    ssh-keygen -t rsa -b 4096 -C "$comment" -q -N "" -f "$keyfile"
}

# Avoid the need to prepend every git command (for example) with:
    #   GIT_SSH_COMMAND="ssh -i /home/user$userN/.ssh/git_rw.k2vm.id_rsa -o IdentitiesOnly=yes"
sshtools.configure_identity_files () {
    local user; user="${1:-$USER}"
    local keysdir; keysdir="${2:-keys}"

    local homedir; homedir=$(usertools.homedir "$user")

    path.is.empty.dir "$homedir/.ssh/$keysdir" && errxit "No keys in $homedir/.ssh/$keysdir"

    rm -f "$homedir/.ssh/config" # TODO: edit this file instead of nuking it

    for key in "$homedir/.ssh/$keysdir"/*
    do
        # Note: using ~ and not $homedir is important. Lockserver tunnel container
        # mounts userN/.ssh onto user/.ssh and reads this file, at which point,
        # $homedir would be wrong
        echo "IdentityFile ${key/$homedir/"~"}" | sudo -u "$user" tee -a "$homedir/.ssh/config" > /dev/null
    done

    chmod 0600 "$homedir/.ssh/config"
}

sshtools.mount_remote () {
    local server_connect remote_dir local_dir
    server_connect="$1"; remote_dir="$2"; local_dir="$3"

    [[ -z $server_connect ]] && { errcho "ERROR: server_connect not supplied"; return 1; }
    [[ -z $remote_dir ]]     && { errcho "ERROR: remote dir not supplied"; return 1; }
    [[ -z $local_dir ]]      && { errcho "ERROR: local dir not supplied"; return 1; }
    # # shellcheck disable=SC2015
    # [[ -f $id_file ]] && [[ -r $id_file ]] || \
    #     { errcho "ERROR: ID file '$id_file' not found or not readable"; return 1; }

    install.apt.pkgs sshfs
    # the grep is to skip the sudo call for non-sudoers - we assume the file has already been fixed
    grep '#user_allow_other' /etc/fuse.conf > /dev/null && \
        sudo perl -pi -e 's/#user_allow_other/user_allow_other/' /etc/fuse.conf

    mkdir -p "$local_dir"

    # ,IdentityFile="$id_file"
    sshfs -o allow_other,default_permissions "${server_connect}:${remote_dir}" "$local_dir"
}


sshtools.keyscan () {
    local server; server="$1"
    local user; user="${2:-$USER}"
    local group; group=$(id -gn "$user")
    local homedir; homedir=$(usertools.homedir "$user")

    install --owner="$user" --group="$group" --mode=0700 --directory "$homedir/.ssh"

    grep "$server" "$homedir/.ssh/known_hosts" > /dev/null 2>&1 || \
        ssh-keyscan "$server" | sudo -u "$user" tee -a "$homedir/.ssh/known_hosts" > /dev/null
}
