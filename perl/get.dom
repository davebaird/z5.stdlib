#!/usr/bin/perl
use strict;
use warnings;
use open ":std", ":encoding(UTF-8)";
use feature qw(signatures say);
no warnings qw(experimental::signatures);
use sigtrap qw/handler signal_handler normal-signals/;
sub signal_handler { die $? } # exiting via 'die' ensures the END block is called

# This script is used by webtools.dump_dom

# Requires Chrome/chromium to be installed

# use Carp;
# use Data::Dumper;

# https://cordis.europa.eu/article/id/123228-the-oldest-directly-dated-modern-human-fossil-found-outside-of-africa-and-the-levant-

use Log::Log4perl qw(:easy);
use WWW::Mechanize::Chrome;

# To install WWW::Mechanize::Chrome, first sudo apt-get install libpng-dev
# For Chromium: sudo apt-get install chromium-browser

# https://chromedevtools.github.io/devtools-protocol/

$| = 1;

my $url = $ARGV[0] || die "Need a URL";

Log::Log4perl->easy_init($ERROR);

# $ENV{WWW_MECHANIZE_CHROME_CONNECTION_STYLE} = 'pipe';

my $mech = get_mech();

my %listeners = setup_listeners($mech);

$mech->get($url);

get_title();

# In the normal case, one of the listeners will trigger dump_dom() and exit ...
for (1..100) {
    $mech->sleep(0.1); # sleep(10) doesn't work
}

# ... but if not, we do it here
dump_dom($mech);

exit(0);

END {
    warn "mech close";
    $mech->close;
    warn "rv: $?";
    exit 0;
}

# ==============================================================================
sub get_mech {
    my $ua = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36';

    WWW::Mechanize::Chrome->new(
        headless => 1,
        # launch_exe => '/usr/local/src/z5.stdlib/bin/launch-zenika-alpine-chrome', # can't get this to work
        launch_arg => [ #"--disable-software-rasterizer",   # for zenika container
                        #"--disable-dev-shm-usage",         # for zenika container
                        "--no-sandbox",
                        '--ignore-certificate-errors',
                        '--disable-web-security',
                        '--allow-running-insecure-content',
                        "--user-agent='$ua'"
                        ],
        separate_session => 1,
        popup_blocking => 1,
        # host => '0.0.0.0',
        # port => 9222,
        # listen_host => '0.0.0.0',
    );
}

sub setup_listeners ($mech) {
    $mech->target->send_packet('Page.setLifecycleEventsEnabled', enabled => JSON::true);

    my %l;

    $l{'DOM.documentUpdated'} = $mech->add_listener('DOM.documentUpdated', sub {
        warn "DOM.documentUpdated\n";
    });

    $l{'Page.loadEventFired'} = $mech->add_listener('Page.loadEventFired', sub { #
        warn "Page.loadEventFired\n";
    });

    $l{'Page.lifecycleEvent'} = $mech->add_listener('Page.lifecycleEvent', sub {
        my $eventname = $_[0]->{params}->{name};

        warn "Page.lifecycleEvent: $eventname\n";

        if ($eventname eq 'firstMeaningfulPaint') {
            $mech->sleep(2);
            dump_dom($mech);
            exit(0);
        }
    });

    return %l;
}

sub get_title {
    my ($title, $type) = $mech->eval( 'document.title' );
    warn "Title: $title\n";
}

sub dump_dom ($mech) {
    my ($html, $type) = $mech->eval('document.documentElement.outerHTML');
    die "dump_dom expected string, got '$type' ($html)" unless $type eq 'string';
    say $html;
}
