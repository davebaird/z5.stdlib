#!/bin/bash
import errcho
import pathtools
import checks
import installer
import usertools

# might want to set this to 'full'
GIT_INSTALL_REPO_CLONE_DEPTH=1

git.install () {
    local user; user="${1:-$USER}"
    install.apt.pkgs git sudo
    github.keyscan "$user"
}

# To run this under sudo, make sure the homedir has been properly changed
# (sometimes sudo doesn't change it). Note: this can be run for the root user
# early in host setups, perhaps before sudo is available, so don't be tempted to
# improve it by passing in the username and using sudo here.
github.keyscan () {
    local user; user="${1:-$USER}"
    local group; group=$(id -gn "$user")
    local homedir; homedir=$(usertools.homedir "$user")

    install --owner="$user" --group="$group" --mode=0700 --directory "$homedir/.ssh"

    grep github.com "$homedir/.ssh/known_hosts" > /dev/null 2>&1 || \
        ssh-keyscan github.com | sudo -u "$user" tee -a "$homedir/.ssh/known_hosts" > /dev/null
}

git.install "$@"

git.user.config () {
    local user; user="${1:-$USER}"
    (
        cd /home
        sudo --login -u "$user" git config --global user.name "$user"
        sudo --login -u "$user" git config --global user.email "$user@$(hostname)"
    )
}

git.install_repo () {
    local account; account="$1"
    local repo; repo="$2"
    local installdir; installdir="$3"
    local user; user="${4:-$USER}"
    local group; group=$(id -gn "$user")

    install --owner="$user" --group="$group" --mode=0755 --directory "$installdir"

    if [[ -n $(ls -A "$installdir") ]]; then
        rerrcho "Files found in $installdir - DISCARDING ANY LOCAL MODS and updating contents"
        (
            cd "$installdir" || errxit "couldn't cd $installdir" "$?"
            sudo -u "$user" git reset --hard
            sudo -u "$user" git pull
        )
    else
        sudo -u "$user" git clone --depth $GIT_INSTALL_REPO_CLONE_DEPTH "git@github.com:$account/$repo.git" "$installdir"
    fi
}

# Add an entry to the .gitignore file of the current repo, from anywhere inside it
git.ignore () {
    local rootdir; rootdir="$(path.their.rootdir .gitignore)"
    local gitignore; gitignore="$rootdir/.gitignore"
    local path; path="$1"

    grep "^$path$" "$gitignore" > /dev/null || echo "$path" >> "$gitignore"
}

git.init.repo () {
    local remote_repo_url; remote_repo_url="$1"

    if [[ -z $remote_repo_url ]]; then
        rerrcho "${FUNCNAME[0]}: must supply a remote repo URL"
        return 1
    fi

    git init
    git add .
    git commit -m 'First commit'
    git branch -M master
    git remote add origin "$remote_repo_url"
    git push -u origin master
}

git-new-empty-repo () {
    errxit "git-new-empty-repo is broken, but useful"

    mkdir "$1"

    (
        cd "$1" || return $?
        git init
    )

    git clone --bare "$1" "$1.git"
    scp -r "$1.git" dave@clyde:/srv/git
    rm -r "$1.git"

    (
        cd "$1" || return $?
        git remote add origin dave@clyde:"/srv/git/$1.git"
    )
}

git-cmp-remote () {
    git fetch origin master
    git diff --summary FETCH_HEAD
}

git3 () {
    local logmsg; logmsg=${1-No log message supplied}
    git add .               || return $?
    git commit -m "$logmsg" || return $?
    git push origin master  || return $?
}

git3- () {
    local logmsg; logmsg=${1-No log message supplied}

    test.is_git_repo && errxit "Don't run git3- from inside a repo"

    for d in "$PWD"/*; do
        if [[ -d "$d" ]] && test.is_git_repo "$d"
        then
        (
            cd "$d" || errxit "Couldn't cd $d" $? # exits the subshell
            merrcho "==================================="
            merrcho "=====##### Committing $d #####====="
            merrcho "==================================="
            git3 "$logmsg"
        )
        fi
    done
}

test.is_git_repo () {(
    local dir; dir="${1:-$PWD}"
    cd "$dir" || return 2
    git rev-parse 2> /dev/null
)}

gitpull- () {
    for d in "$PWD"/*; do
        if [[ -d "$d" ]]; then
        (
            cd "$d" || return 1
            gerrcho "Updating $d"
            git pull
        )
        fi
    done
}

